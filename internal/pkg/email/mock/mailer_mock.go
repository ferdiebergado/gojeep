// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferdiebergado/gojeep/internal/pkg/email (interfaces: Mailer)
//
// Generated by this command:
//
//	mockgen -destination=mock/mailer_mock.go -package=mock . Mailer
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
	isgomock struct{}
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailer) Send(to []string, subject, body, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", to, subject, body, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailerMockRecorder) Send(to, subject, body, contentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailer)(nil).Send), to, subject, body, contentType)
}

// SendHTML mocks base method.
func (m *MockMailer) SendHTML(to []string, subject, tmplName string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHTML", to, subject, tmplName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHTML indicates an expected call of SendHTML.
func (mr *MockMailerMockRecorder) SendHTML(to, subject, tmplName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHTML", reflect.TypeOf((*MockMailer)(nil).SendHTML), to, subject, tmplName, data)
}

// SendPlain mocks base method.
func (m *MockMailer) SendPlain(to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPlain", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPlain indicates an expected call of SendPlain.
func (mr *MockMailerMockRecorder) SendPlain(to, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPlain", reflect.TypeOf((*MockMailer)(nil).SendPlain), to, subject, body)
}
